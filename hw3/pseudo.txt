struct mysem_t
{
    int id;
    int value;
    mtx_t mutex;
    conditional_t cond;
}



typedef struct 
{
    int sem_id;
    int value;
    pthread_mutex_t mutex;
    pthread_cond_t cond;
} mysem_t;



mysem_create():
    give id on semaphore;
    initialize mutex;
    initialize cond;
    value = 2; // not valid
    return SUCCESS;

mysem_init(int n):
    if (init_value != 0 && init_value != 1) 
        return ERROR
    if(value != 2) 
    if s->sem_id already initialized     
        return ERROR 
    value = n;

    return SUCCESS
    

mysem_down():
    mutex lock;
    if (value <= 0)
        value--;
        cond_wait(cond, mutex);
    else if (value == 1)
        value--;
    mutex unlock;
    return SUCCESS;
    
mysem_up():
    mutex lock;
    if (value == 2)
        mutex unlock;
        return ERROR: Semaphore not initialized; 
    else if (value == 1)
        mutex unlock;
        return ERROR: value already 1;
    else if (value == 0)
        value++;
        mutex unlock;
    else    
        cond_signal(cond);
        mutex unlock;
        value++;
    
    return SUCCESS; 


mysem_destroy(): 
    if (value == 2)
        return ERROR: Semaphore not initialized;
    destroy mutex;
    destroy cond;
    RETURN SUCCEESS;



monitors_lib
------------
struct Monitor:
    pthread_mutex_t mtx;
    pthread_cond_t cond;
    

initMonitor():
    monitor = malloc();
    mutex_init(monitor->mtx);
    cond_init(monitor->cond);
    return monitor;

enterMonitor():
    lock_mutex(monitor->mtx);

exitMonitor():
    unlock_mutex(monitor->mtx);

signal():
    condition_signal(monitor->cond);
    
signal_all():
    condition_broadcast(monitor->cond);
    
    
destroyMonitor():
    mutex_destroy(monitor->mtx);
    cond_destroy(monitor->cond);
    free(monitor);

    
hw3_2
-----



hw3_3
-----

struct bridge:
    int b_waiting;
    int r_waiting;
    int max_cars;
    int on_bridge;
    int red_passed;
    int blue_passed;
    char color;


red_car():
    enterMonitor(bridge_monitor);
    reds_num + 1;
    r_waiting + 1;
    exitMonitor(bridge_monitor);

    while(1)
        enterMonitor(bridge_monitor);
        if(color == 'b')
            wait(bridge_monitor);
            exitMonitor(bridge_monitor);
        else if(on_bridge < max_cars)
            if(b_waiting > 0)
                if(red_passed < 2*max_cars)
                    break; // it passes //
                else
                    wait(bridge_monitor);
                    exitMonitor(bridge_monitor);
            else
                break; // it passes //
        else
            wait(bridge_monitor);
            exitMonitor(bridge_monitor);
    
    r_waiting - 1;
    color = 'r';
    on_bridge + 1;
    blue_passed = 0;
    signal_all(bridge_monitor);
    exitMonitor(bridge_monitor);

    sleep(x);
    enterMonitor(bridge_monitor);
    on_bridge - 1;
    if(on_bridge == 0)
        color = empty;
    signal_all(bridge_monitor);
    exitMonitor(bridge_monitor);

    thread_exit();
            
    
    
main():
    if (arguments != 3) 
        return ERROR: Invalid arguments;
    
    bridge init to 0;
    fopen(filename);    
    bridge_monitor = initMonitor(bridge_monitor);
    
    int red = 0, blue = 0;
    while(line exists)
        if (line == 'r') 
            red++;
            sleep();
            pthread_create(ids[i], NULL, red_car, red);
            i++;
            
        else if (line == 'b') 
            blue++;
            sleep();
            pthread_create(ids[i], NULL, blue_car, blue);
            i++;     
                    
    for j:i
        pthread_join(ids[j], NULL);

    destroyMonitor(bridge_monitor);

    return SUCCESS;



hw3_4
-----

struct train:
    int max_passengers;
    int on_train;
    int pass_exits;
    pthread_t *passengers;
    int exit;


train_function():
    while(1)
        enterMonitor(train);
        wait for passengers to get on traIN ;
        exitMonitor(train);

        sleep(time_of_ride);   
        
        enterMonitor(ride);
        signal all to get off;
        exitMonitor(ride);
        
        enterMonitor(train);
        wait so that passengers get off train
        exitMonitor(train);

        enterMonitor(wait);
        on_train = 0;
        pass_exits = 0;
        signal all to get on train;
        exitMonitor(wait);

        if(exit == 1)
            break;
        
    thread_exit();


passengers_function(flag):
    if (flag != NULL)
        inform exit;
    
    enterMonitor(wait);
    pass_num++;
    exitMonitor(wait);
    
    while(1)
    enterMonitor(wait);
    if (on_train = max_passengers)
        wait -- train is full;
        exitMonitor(wait);    
    else
        train->on_train++;
        if(max_passengers == on_train)
            exitMonitor(wait);
            enterMonitor(train);
            signal ride to start;
            exitMonitor(train);
        else 
            exitMonitor(wait);    
        break;
        
    enterMonitor(ride);
    wait until ride is finished
    pass_exits++;
    if (pass_exits == max_passengers)
        exitMonitor(ride);
        enterMonitor(train);
        signal train to accept passengers;
        exitMonitor(train);
    else
        exitMonitor(ride)
    
    if(inform_exit)
        exit = 1;

    thread_exit();

    
main()
    initialize struct train;
    open file given as argument
    initialize monitors
    pthread_create(train)
    while(file input)
        if (input > 0)
            sleep(abs(input))
            flag = 1 // notify if its the last passenger
            pthread_create(passenger)
        else
            sleep(abs(input))
            pthread_create(passenger)
    pthread_join(train);
    destroy all monitors
    return SUCCEESS;
    
     


     


     


